{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","api/api.js","components/FindMovie/FindMovie.js","App.js","index.js"],"names":["MovieCard","Title","Plot","Poster","imdbID","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","getMovie","title","url","fetch","then","response","ok","Error","status","statusText","json","FindMovie","addMovie","useState","setTitle","isPreviewShown","setIsPreviewShown","newMovie","setNewMovie","error","setError","isAddButtonDisabled","setDisability","htmlFor","type","id","placeholder","classNames","input","value","onChange","event","target","onClick","result","Response","some","disabled","App","setMovies","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fa8a4c31.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  Title,\n  Plot,\n  Poster,\n  imdbID,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={Poster}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{Title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {Plot}\n        <br />\n        <a href={`https://www.imdb.com/title/${imdbID}/`}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  Title: PropTypes.string,\n  Plot: PropTypes.string,\n  Poster: PropTypes.string,\n  imdbID: PropTypes.string,\n};\n\nMovieCard.defaultProps = {\n  Title: '',\n  Plot: '',\n  Poster: '',\n  imdbID: '',\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbID} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbID: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","const BASE_URL = 'http://www.omdbapi.com/?apikey=87aae092&t=';\n\nfunction request(url) {\n  return fetch(`${BASE_URL}${url}`)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n}\n\nexport function getMovie(title) {\n  return request(title);\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './FindMovie.scss';\n\nimport { MovieCard } from '../MovieCard';\nimport { getMovie } from '../../api/api';\n\nexport const FindMovie = ({ addMovie, movies }) => {\n  const [title, setTitle] = useState('');\n  const [isPreviewShown, setIsPreviewShown] = useState(false);\n  const [newMovie, setNewMovie] = useState({});\n  const [error, setError] = useState('');\n  const [isAddButtonDisabled, setDisability] = useState(true);\n\n  const handleChange = (event) => {\n    setTitle(event.target.value);\n    setError('');\n  };\n\n  const findMovie = () => {\n    getMovie(title)\n      .then((result) => {\n        if (result.Response === 'False') {\n          setError(result.Error);\n\n          return;\n        }\n\n        setNewMovie(result);\n        setIsPreviewShown(true);\n        setDisability(false);\n      });\n  };\n\n  const handleAddition = () => {\n    setTitle('');\n    setIsPreviewShown(false);\n    setDisability(true);\n\n    if (movies.some(movie => newMovie.imdbID === movie.imdbID)) {\n      setError('You have already added this movie');\n\n      return;\n    }\n\n    addMovie(newMovie);\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames({\n                input: true,\n                'is-danger': error,\n              })}\n              value={title}\n              onChange={handleChange}\n            />\n          </div>\n\n          {error && (\n            <p className=\"help is-danger\">\n              {error}\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={findMovie}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={handleAddition}\n              disabled={isAddButtonDisabled}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      {isPreviewShown && (\n        <div className=\"container\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard {...newMovie} />\n        </div>\n      )}\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      Title: PropTypes.string,\n      Plot: PropTypes.string,\n      Poster: PropTypes.string,\n      imdbID: PropTypes.string,\n    }),\n  ).isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState([]);\n\n  const addMovie = (newMovie) => {\n    setMovies([\n      ...movies,\n      newMovie,\n    ]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        {movies.length === 0 ? (\n          <h1>\n            {`It's empty, so add your favourite movies! `}\n          </h1>\n        ) : (\n          <MoviesList movies={movies} />\n        )}\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie addMovie={addMovie} movies={movies} />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}